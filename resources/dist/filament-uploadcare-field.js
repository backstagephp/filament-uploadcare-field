var h=class{constructor(e){this.wrapper=e,this.observer=null,this.init()}init(){this.hideDoneButtons(),this.setupObserver()}setupObserver(){this.observer=new MutationObserver(e=>{e.forEach(t=>{t.type==="childList"&&t.addedNodes.forEach(i=>{if(i.nodeType===Node.ELEMENT_NODE){i.classList&&i.classList.contains("uc-done-btn")&&this.hideDoneButton(i);let s=i.querySelectorAll&&i.querySelectorAll(".uc-done-btn");s&&s.forEach(a=>this.hideDoneButton(a))}})})}),this.wrapper&&this.observer.observe(this.wrapper,{childList:!0,subtree:!0})}hideDoneButtons(){document.querySelectorAll(".uc-done-btn").forEach(t=>this.hideDoneButton(t))}hideDoneButton(e){e&&(e.style.display="none",e.style.visibility="hidden",e.style.opacity="0",e.style.pointerEvents="none",e.style.position="absolute",e.style.width="0",e.style.height="0",e.style.overflow="hidden",e.style.clip="rect(0, 0, 0, 0)",e.style.margin="0",e.style.padding="0",e.style.border="0",e.style.background="transparent",e.style.color="transparent",e.style.fontSize="0",e.style.lineHeight="0")}destroy(){this.observer&&(this.observer.disconnect(),this.observer=null)}};function p(n){return window._initializedUploadcareContexts||(window._initializedUploadcareContexts=new Set),{state:n.state,statePath:n.statePath,initialState:n.initialState,publicKey:n.publicKey,isMultiple:n.isMultiple,multipleMin:n.multipleMin,multipleMax:n.multipleMax,isImagesOnly:n.isImagesOnly,accept:n.accept,sourceList:n.sourceList,uploaderStyle:n.uploaderStyle,isWithMetadata:n.isWithMetadata,uploadedFiles:"",ctx:null,removeEventListeners:null,uniqueContextName:n.uniqueContextName,isInitialized:!1,stateHasBeenInitialized:!1,isStateWatcherActive:!1,isLocalUpdate:!1,doneButtonHider:null,documentClassObserver:null,init(){this.isContextAlreadyInitialized()||(this.markContextAsInitialized(),this.applyTheme(),this.initUploadcare(),this.setupThemeObservers(),this.setupDoneButtonObserver())},isContextAlreadyInitialized(){return window._initializedUploadcareContexts.has(this.uniqueContextName)},markContextAsInitialized(){window._initializedUploadcareContexts.add(this.uniqueContextName)},applyTheme(){let e=this.getCurrentTheme();document.querySelectorAll(`uc-file-uploader-${this.uploaderStyle}`).forEach(i=>{i.classList.remove("uc-dark","uc-light"),i.classList.add(`uc-${e}`)})},getCurrentTheme(){return document.documentElement.classList.contains("dark")?"dark":"light"},setupThemeObservers(){window.addEventListener("storage",this.handleThemeStorageChange.bind(this)),window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",this.handleSystemThemeChange.bind(this)),this.setupDocumentClassObserver()},handleThemeStorageChange(e){e.key==="theme"&&this.applyTheme()},handleSystemThemeChange(){localStorage.getItem("theme")==="system"&&this.applyTheme()},setupDocumentClassObserver(){this.documentClassObserver=new MutationObserver(e=>{e.forEach(t=>{if(t.type==="attributes"&&t.attributeName==="class"){let i=document.documentElement.classList.contains("dark"),s=t.oldValue&&t.oldValue.includes("dark");i!==s&&this.applyTheme()}})}),this.documentClassObserver.observe(document.documentElement,{attributes:!0,attributeOldValue:!0,attributeFilter:["class"]})},initUploadcare(){this.removeEventListeners&&this.removeEventListeners(),this.initializeUploader()},initializeUploader(e=0,t=10){if(e>=t){console.error("Failed to initialize Uploadcare after maximum retries");return}this.ctx=document.querySelector(`uc-upload-ctx-provider[ctx-name="${this.uniqueContextName}"]`);let i=this.getUploadcareApi();if(!this.isValidContext(i)){setTimeout(()=>this.initializeUploader(e+1,t),100);return}this.markAsInitialized(),this.removeRequiredAttributes(),this.initializeState(i),this.setupEventListeners(i)},getUploadcareApi(){try{return this.ctx?.getAPI()}catch{return null}},isValidContext(e){return this.ctx&&e&&e.addFileFromCdnUrl},markAsInitialized(){this.isInitialized=!0},removeRequiredAttributes(){setTimeout(()=>{let e=this.$el.closest("uc-config");document.querySelectorAll("uc-form-input input[required]").forEach(i=>i.removeAttribute("required"))},100)},initializeState(e){this.$nextTick(()=>{this.initialState&&!this.stateHasBeenInitialized&&!this.uploadedFiles?this.loadInitialState(e):!this.initialState&&!this.stateHasBeenInitialized&&(this.stateHasBeenInitialized=!0,this.uploadedFiles=this.isMultiple?"[]":"",this.isLocalUpdate=!0,this.state=this.uploadedFiles),this.setupStateWatcher()})},loadInitialState(e){try{let t=this.parseInitialState();this.addFilesFromInitialState(e,t),this.stateHasBeenInitialized=!0,this.isLocalUpdate=!0,this.state=this.uploadedFiles}catch(t){console.error("Error parsing initialState:",t)}},parseInitialState(){let e=t=>{if(typeof t=="string")try{let i=JSON.parse(t);if(typeof i=="string")try{i=JSON.parse(i)}catch(s){console.warn("Failed to parse double-encoded JSON:",s)}return i}catch(i){return console.warn("Failed to parse string as JSON:",i),t}return t};if(this.initialState&&typeof this.initialState=="object"&&!Array.isArray(this.initialState)){let t=Object.keys(this.initialState);if(t.length===1)return e(this.initialState[t[0]])}return e(this.initialState)},addFilesFromInitialState(e,t){let i=t;if(t&&typeof t=="object"&&!Array.isArray(t))try{i=Array.from(t)}catch(r){console.warn("Failed to convert Proxy to array:",r),i=[t]}else Array.isArray(t)||(i=[t]);if(Array.isArray(i)&&i.length===1&&Array.isArray(i[0])&&(i=i[0]),Array.isArray(i)&&i.length===1&&typeof i[0]=="string")try{let r=JSON.parse(i[0]);i=Array.isArray(r)?r:[r]}catch(r){console.warn("Failed to parse JSON string from filesArray[0]:",r)}Array.isArray(i)||(i=[i]);let s=(r,o=0)=>{if(!r)return;if(Array.isArray(r)){r.forEach((l,u)=>{s(l,`${o}.${u}`)});return}if(typeof r=="string")try{let l=JSON.parse(r);s(l,o);return}catch(l){console.warn(`Failed to parse string item ${o} as JSON:`,l)}let d=typeof r=="object"?r.cdnUrl:r;if(!d||!this.isValidUrl(d)){console.warn(`Invalid URL for file ${o}:`,d);return}let c=this.extractUuidFromUrl(d);if(c&&typeof e.addFileFromUuid=="function")try{e.addFileFromUuid(c)}catch(l){console.error(`Failed to add file ${o} with UUID ${c}:`,l)}else console.error(c?"addFileFromUuid method not available on API":`Could not extract UUID from URL: ${d}`)};i.forEach(s);let a=this.formatFilesForState(i);this.uploadedFiles=JSON.stringify(a),this.initialState=this.uploadedFiles},isValidUrl(e){if(!e||typeof e!="string")return!1;try{return new URL(e),!0}catch{return!1}},setupStateWatcher(){this.$watch("state",e=>{if(this.isLocalUpdate){this.isLocalUpdate=!1;return}if(!this.stateHasBeenInitialized){this.stateHasBeenInitialized=!0;return}if((!e||e==="[]"||e==='""')&&!this.uploadedFiles)return;let t=this.normalizeStateValue(e),i=this.normalizeStateValue(this.uploadedFiles);t!==i&&e&&e!=="[]"&&e!=='""'&&(this.uploadedFiles=e,this.isLocalUpdate=!0)})},normalizeStateValue(e){if(!e)return"";try{let t=typeof e=="string"?JSON.parse(e):e;return JSON.stringify(this.formatFilesForState(t))}catch{return e}},isStateChanged(){let e=this.normalizeStateValue(this.state),t=this.normalizeStateValue(this.initialState);return e!==t},setupEventListeners(e){let t=this.createFileUploadSuccessHandler(),i=this.createFileUrlChangedHandler(),s=this.createFileRemovedHandler();this.ctx.addEventListener("file-upload-started",a=>{let r=this.$el.closest("form");r&&r.dispatchEvent(new CustomEvent("form-processing-started",{detail:{message:"Uploading file..."}}))}),this.ctx.addEventListener("file-upload-success",t),this.ctx.addEventListener("file-url-changed",i),this.ctx.addEventListener("file-removed",s),this.removeEventListeners=()=>{this.ctx.removeEventListener("file-upload-started",a=>{let r=this.$el.closest("form");r&&r.dispatchEvent(new CustomEvent("form-processing-started",{detail:{message:"Uploading file..."}}))}),this.ctx.removeEventListener("file-upload-success",t),this.ctx.removeEventListener("file-url-changed",i),this.ctx.removeEventListener("file-removed",s)}},createFileUploadSuccessHandler(){let e=null;return t=>{e&&clearTimeout(e),e=setTimeout(()=>{let i=this.isWithMetadata?t.detail:t.detail.cdnUrl;try{let s=this.getCurrentFiles(),a=this.updateFilesList(s,i);this.updateState(a);let r=this.$el.closest("form");r&&r.dispatchEvent(new CustomEvent("form-processing-finished"))}catch(s){console.error("Error updating state after upload:",s)}},this.isMultiple?200:100)}},createFileUrlChangedHandler(){let e=null;return t=>{let i=t.detail;i.cdnUrlModifiers&&(e&&clearTimeout(e),e=setTimeout(()=>{try{let s=this.getCurrentFiles(),a=this.updateFileUrl(s,i);this.updateState(a)}catch(s){console.error("Error updating state after URL change:",s)}},100))}},createFileRemovedHandler(){let e=null;return t=>{e&&clearTimeout(e),e=setTimeout(()=>{try{let i=t.detail,s=this.getCurrentFiles(),a=this.removeFile(s,i);this.updateState(a)}catch(i){console.error("Error in handleFileRemoved:",i)}},100)}},getCurrentFiles(){try{let e=this.uploadedFiles?JSON.parse(this.uploadedFiles):[];return Array.isArray(e)?e:[]}catch{return[]}},updateFilesList(e,t){return this.isMultiple?e.some(s=>{let a=typeof s=="object"?s.cdnUrl:s,r=typeof t=="object"?t.cdnUrl:t;return a===r})?e:[...e,t]:[t]},updateFileUrl(e,t){let i=this.findFileIndex(e,t.uuid);if(i===-1)return e;let s=this.isWithMetadata?t:t.cdnUrl;return this.isMultiple?(e[i]=s,e):[s]},removeFile(e,t){let i=this.findFileIndex(e,t.uuid);return i===-1?e:this.isMultiple?(e.splice(i,1),e):[]},findFileIndex(e,t){return e.findIndex(i=>{let s=typeof i=="object"?i.cdnUrl:i;return s&&s.includes(t)})},updateState(e){let t=this.formatFilesForState(e),i=JSON.stringify(t),s=this.getCurrentFiles(),a=JSON.stringify(this.formatFilesForState(s)),r=JSON.stringify(this.formatFilesForState(t));a!==r&&(this.uploadedFiles=i,this.isLocalUpdate=!0,this.state=this.uploadedFiles,this.isMultiple&&e.length>1&&this.$nextTick(()=>{this.isLocalUpdate=!1}))},formatFilesForState(e){return e.map(t=>this.isWithMetadata?t:typeof t=="object"?t.cdnUrl:t)},setupDoneButtonObserver(){let e=this.$el.closest(".uploadcare-wrapper");e&&(this.doneButtonHider=new h(e))},destroy(){this.doneButtonHider&&(this.doneButtonHider.destroy(),this.doneButtonHider=null),this.documentClassObserver&&(this.documentClassObserver.disconnect(),this.documentClassObserver=null)},extractUuidFromUrl(e){if(!e||typeof e!="string")return null;let t=e.match(/\/([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})(?:\/|$)/i);return t&&t[1]?t[1]:typeof e=="object"&&e.uuid?e.uuid:null}}}export{p as default};
